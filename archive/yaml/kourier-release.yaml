apiVersion: v1
kind: Namespace
metadata:
  name: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/part-of: knative-serving
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kourier-bootstrap
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
data:
  envoy-bootstrap.yaml: |
    dynamic_resources:
      ads_config:
        transport_api_version: V3
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: xds_cluster}
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
    node:
      cluster: kourier-knative
      id: 3scale-kourier-gateway
    static_resources:
      listeners:
        - name: stats_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9000
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: stats_server
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                    route_config:
                      name: stats_route
                      virtual_hosts:
                        - name: stats_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                              route:
                                cluster: service_stats
                            - match:
                                safe_regex:
                                  regex: "^/stats(/.*)?"
                              route:
                                cluster: service_stats
                                prefix_rewrite: "/stats"
      clusters:
        - name: service_stats
          connect_timeout: 0.250s
          type: static
          load_assignment:
            cluster_name: service_stats
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 9001
        - name: xds_cluster
          connect_timeout: 1s
          type: STRICT_DNS
          respect_dns_ttl: true
          dns_lookup_family: V4_ONLY
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options: {}
          load_assignment:
            cluster_name: xds_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "kourier-control"
                          port_value: 18000
    admin:
      access_log:
        - name: envoy.access_loggers.stdout
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 9001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: 3scale-kourier-control
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
spec:
  selector:
    matchLabels:
      app: 3scale-kourier-control
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: 3scale-kourier-control
    spec:
      containers:
        - image: registry.cn-hangzhou.aliyuncs.com/knative-mirrors/knative-net-kourier-controller:v1.9.0
          name: kourier-control
          command:
            - /kourier
          args:
            - -config_dir=/tmp/config
          imagePullPolicy: IfNotPresent
          env:
            - name: CERTS_SECRET_NAMESPACE
              value: ""
            - name: CERTS_SECRET_NAME
              value: ""
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_DOMAIN
              value: "knative.dev/net-kourier"
            - name: KOURIER_GATEWAY_NAMESPACE
              value: "kourier-system"
          ports:
            - name: http2-xds
              containerPort: 18000
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 1000m
              memory: 500Mi
      restartPolicy: Always
      serviceAccountName: net-kourier
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: 3scale-kourier-gateway
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: 3scale-kourier-gateway
  template:
    metadata:
      labels:
        app: 3scale-kourier-gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /stats/prometheus
        prometheus.io/port: "9000"
        prometheus.io/static_scraping: "true"
    spec:
      containers:
        - args:
            - --base-id 1
            - -c /tmp/config/envoy-bootstrap.yaml
            - --log-level info
          command:
            - /usr/local/bin/envoy
          image: registry.cn-hangzhou.aliyuncs.com/knative-mirrors/envoy:v1.24-latest
          name: kourier-gateway
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config-volume
              mountPath: /tmp/config
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 15"]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http2-stats
              containerPort: 9000
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 1000m
              memory: 500Mi
      volumes:
        - name: config-volume
          configMap:
            name: kourier-bootstrap
      restartPolicy: Always
      serviceAccountName: net-kourier
---
apiVersion: v1
kind: Service
metadata:
  name: kourier
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: 3scale-kourier-gateway
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: kourier-control
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
spec:
  ports:
    - port: 18000
      targetPort: 18000
      protocol: TCP
  selector:
    app: 3scale-kourier-control
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: net-kourier
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: net-kourier
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods", "endpoints", "services", "secrets", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.internal.knative.dev"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["networking.internal.knative.dev"]
    resources: ["ingresses/status"]
    verbs: ["update"]
  - apiGroups: ["","coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create", "get", "update", "delete"]
  - apiGroups: ["networking.x-k8s.io"]
    resources: ["gatewayclasses", "gateways", "routes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["networking.x-k8s.io"]
    resources: ["gatewayclasses/status", "gateways/status", "routes/status"]
    verbs: ["update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: net-kourier
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
subjects:
  - kind: ServiceAccount
    name: net-kourier
    namespace: kourier-system
roleRef:
  kind: ClusterRole
  name: net-kourier
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: kourier-internal
  namespace: knative-serving
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: "1.9.0"
    app.kubernetes.io/name: knative-serving
spec:
  type: ClusterIP
  selector:
    app: 3scale-kourier-gateway
  ports:
    - name: http2
      port: 80
      targetPort: 8081 